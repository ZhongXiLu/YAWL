{
	"csm": {
		"nodes": {
			"103": {
				"typename": {
					"type": "string",
					"value": "StartConditionIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						54,
						364
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"39": {
								"src": {
									"type": "string",
									"value": "/Formalisms/YAWL/yawl_icons/start_condition.png"
								},
								"width": {
									"type": "double",
									"value": 60
								},
								"height": {
									"type": "double",
									"value": 60
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\nif(getAttr('hightlight')) {\n\t({'src':'/Formalisms/YAWL/yawl_icons/m_start_condition.png'})\n} else {\n\t({'src':'/Formalisms/YAWL/yawl_icons/start_condition.png'})\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										3,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"62": {
								"textContent": {
									"type": "string",
									"value": "Start"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"name\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										67
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"87": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-style": "italic",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										90
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/YAWL/YAWL/StartCondition/103.instance"
				},
				"$type": "/Formalisms/YAWL/YAWL.defaultIcons/StartConditionIcon"
			},
			"104": {
				"typename": {
					"type": "string",
					"value": "TaskIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						379,
						289
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"9": {
								"src": {
									"type": "string",
									"value": "/Formalisms/YAWL/yawl_icons/atomic.png"
								},
								"width": {
									"type": "double",
									"value": 110
								},
								"height": {
									"type": "double",
									"value": 70
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\nif(getAttr('hightlight')) {\n\t({'src':'/Formalisms/YAWL/yawl_icons/m_atomic.png'})\n} else {\n\t({'src':'/Formalisms/YAWL/yawl_icons/atomic.png'})\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										3,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"46": {
								"textContent": {
									"type": "string",
									"value": "T2"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"name\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										75
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"71": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-style": "italic",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										100
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/YAWL/YAWL/Task/104.instance"
				},
				"$type": "/Formalisms/YAWL/YAWL.defaultIcons/TaskIcon"
			},
			"105": {
				"typename": {
					"type": "string",
					"value": "TaskIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						379,
						439
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"9": {
								"src": {
									"type": "string",
									"value": "/Formalisms/YAWL/yawl_icons/atomic.png"
								},
								"width": {
									"type": "double",
									"value": 110
								},
								"height": {
									"type": "double",
									"value": 70
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\nif(getAttr('hightlight')) {\n\t({'src':'/Formalisms/YAWL/yawl_icons/m_atomic.png'})\n} else {\n\t({'src':'/Formalisms/YAWL/yawl_icons/atomic.png'})\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										3,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"46": {
								"textContent": {
									"type": "string",
									"value": "T3"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"name\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										75
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"71": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-style": "italic",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										100
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/YAWL/YAWL/Task/105.instance"
				},
				"$type": "/Formalisms/YAWL/YAWL.defaultIcons/TaskIcon"
			},
			"107": {
				"typename": {
					"type": "string",
					"value": "XorSplitTaskIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						179,
						364
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"30": {
								"src": {
									"type": "string",
									"value": "/Formalisms/YAWL/yawl_icons/xor_split.png"
								},
								"width": {
									"type": "double",
									"value": 110
								},
								"height": {
									"type": "double",
									"value": 80
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\nif(getAttr('hightlight')) {\n\t({'src':'/Formalisms/YAWL/yawl_icons/m_xor_split.png'})\n} else {\n\t({'src':'/Formalisms/YAWL/yawl_icons/xor_split.png'})\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										3,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"56": {
								"textContent": {
									"type": "string",
									"value": "T1"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"name\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										80
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"75": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-style": "italic",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										104
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/YAWL/YAWL/XorSplitTask/107.instance"
				},
				"$type": "/Formalisms/YAWL/YAWL.defaultIcons/XorSplitTaskIcon"
			},
			"108": {
				"typename": {
					"type": "string",
					"value": "AndJoinTaskIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						579,
						364
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"24": {
								"src": {
									"type": "string",
									"value": "/Formalisms/YAWL/yawl_icons/and_join.png"
								},
								"width": {
									"type": "double",
									"value": 110
								},
								"height": {
									"type": "double",
									"value": 80
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\nif(getAttr('hightlight')) {\n\t({'src':'/Formalisms/YAWL/yawl_icons/m_and_join.png'})\n} else {\n\t({'src':'/Formalisms/YAWL/yawl_icons/and_join.png'})\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										3,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"52": {
								"textContent": {
									"type": "string",
									"value": "T4"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"name\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										79
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"77": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-style": "italic",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										101
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/YAWL/YAWL/AndJoinTask/108.instance"
				},
				"$type": "/Formalisms/YAWL/YAWL.defaultIcons/AndJoinTaskIcon"
			},
			"109": {
				"typename": {
					"type": "string",
					"value": "EndConditionIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						739,
						369
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"42": {
								"src": {
									"type": "string",
									"value": "/Formalisms/YAWL/yawl_icons/end_condition.png"
								},
								"width": {
									"type": "double",
									"value": 60
								},
								"height": {
									"type": "double",
									"value": 60
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\nif(getAttr('hightlight')) {\n\t({'src':'/Formalisms/YAWL/yawl_icons/m_end_condition.png'})\n} else {\n\t({'src':'/Formalisms/YAWL/yawl_icons/end_condition.png'})\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										3,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"64": {
								"textContent": {
									"type": "string",
									"value": "End"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"name\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										14,
										66
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"85": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-style": "italic",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										10,
										91
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/YAWL/YAWL/EndCondition/109.instance"
				},
				"$type": "/Formalisms/YAWL/YAWL.defaultIcons/EndConditionIcon"
			},
			"110": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#003A5D",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 3
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "ConditionToTaskLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						149.14999956747403,
						400.49779412400767
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;33.79074251881383,99.98918860475786%",
										"0;-4.497355186669324,-1.4704292441872426%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-0.8425242607402009"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/YAWL/YAWL/ConditionToTask/110.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/YAWL/YAWL.defaultIcons/StartConditionIcon/103.instance--/Formalisms/YAWL/YAWL.defaultIcons/ConditionToTaskLink/110.instance": "M114.99999999999999,401L149.149999567474,400.49779412400767",
						"/Formalisms/YAWL/YAWL.defaultIcons/ConditionToTaskLink/110.instance--/Formalisms/YAWL/YAWL.defaultIcons/XorSplitTaskIcon/107.instance": "M149.0747793581746,400.4989003035563L182.99955925605533,400.00000648152866"
					}
				},
				"$type": "/Formalisms/YAWL/YAWL.defaultIcons/ConditionToTaskLink"
			},
			"111": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#003A5D",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 3
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TaskToTaskLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						336.6245534390374,
						358.4156250896842
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;44.1318316955838,82.7918690488333%",
										"0;-34.72714927167897,-56.084814516951354%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-34.11447294534115"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/YAWL/YAWL/TaskToTask/111.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/YAWL/YAWL.defaultIcons/XorSplitTaskIcon/107.instance--/Formalisms/YAWL/YAWL.defaultIcons/TaskToTaskLink/111.instance": "M290,390L336.6245534390374,358.4156250896842",
						"/Formalisms/YAWL/YAWL.defaultIcons/TaskToTaskLink/111.instance--/Formalisms/YAWL/YAWL.defaultIcons/TaskIcon/104.instance": "M336.56216556070797,358.457887845972L382.9997777152993,327.0001505799586"
					}
				},
				"$type": "/Formalisms/YAWL/YAWL.defaultIcons/TaskToTaskLink"
			},
			"112": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#003A5D",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 3
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TaskToTaskLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						336.5,
						453.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;47.675828844508146,83.90750447928265%",
										"0;26.143548165529637,54.40156883821607%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;32.95742485711495"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/YAWL/YAWL/TaskToTask/112.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/YAWL/YAWL.defaultIcons/XorSplitTaskIcon/107.instance--/Formalisms/YAWL/YAWL.defaultIcons/TaskToTaskLink/112.instance": "M291,424L336.5,453.5",
						"/Formalisms/YAWL/YAWL.defaultIcons/TaskToTaskLink/112.instance--/Formalisms/YAWL/YAWL.defaultIcons/TaskIcon/105.instance": "M336.5630773997359,453.5408963360925L381.9997660909795,482.9998483447009"
					}
				},
				"$type": "/Formalisms/YAWL/YAWL.defaultIcons/TaskToTaskLink"
			},
			"113": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#003A5D",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 3
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TaskToTaskLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						536,
						359
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;48.42187875526395,79.58286941208591%",
										"0;31.81652652539873,60.552183248326244%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;37.26640190097714"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/YAWL/YAWL/TaskToTask/113.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/YAWL/YAWL.defaultIcons/TaskIcon/104.instance--/Formalisms/YAWL/YAWL.defaultIcons/TaskToTaskLink/113.instance": "M490,324L536,359",
						"/Formalisms/YAWL/YAWL.defaultIcons/TaskToTaskLink/113.instance--/Formalisms/YAWL/YAWL.defaultIcons/AndJoinTaskIcon/108.instance": "M536.0598956371298,359.0455727673814L581.9997914253308,393.99984130188216"
					}
				},
				"$type": "/Formalisms/YAWL/YAWL.defaultIcons/TaskToTaskLink"
			},
			"114": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#003A5D",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 3
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TaskToTaskLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						536.1254544072126,
						451.9154546386177
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;43.63890378356655,82.92664275911564%",
										"0;-34.232366723137204,-55.88534620723051%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-33.97654403625706"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/YAWL/YAWL/TaskToTask/114.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/YAWL/YAWL.defaultIcons/TaskIcon/105.instance--/Formalisms/YAWL/YAWL.defaultIcons/TaskToTaskLink/114.instance": "M490,483L536.1254544072126,451.9154546386177",
						"/Formalisms/YAWL/YAWL.defaultIcons/TaskToTaskLink/114.instance--/Formalisms/YAWL/YAWL.defaultIcons/AndJoinTaskIcon/108.instance": "M536.0626132059542,451.9578041438133L581.9997720390684,421.0001536258451"
					}
				},
				"$type": "/Formalisms/YAWL/YAWL.defaultIcons/TaskToTaskLink"
			},
			"117": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#003A5D",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 3
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TaskToConditionLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						716.5,
						401
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;25.499412533640907,100%",
										"0;-4,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;0"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/YAWL/YAWL/TaskToCondition/117.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/YAWL/YAWL.defaultIcons/AndJoinTaskIcon/108.instance--/Formalisms/YAWL/YAWL.defaultIcons/TaskToConditionLink/117.instance": "M691,401L716.5,401",
						"/Formalisms/YAWL/YAWL.defaultIcons/TaskToConditionLink/117.instance--/Formalisms/YAWL/YAWL.defaultIcons/EndConditionIcon/109.instance": "M716.5776998931243,401L741.9994125336409,401"
					}
				},
				"$type": "/Formalisms/YAWL/YAWL.defaultIcons/TaskToConditionLink"
			}
		},
		"edges": [],
		"metamodels": [
			"/Formalisms/YAWL/YAWL.defaultIcons"
		]
	},
	"asm": {
		"nodes": {
			"103": {
				"name": {
					"type": "string",
					"value": "Start"
				},
				"tokens": {
					"type": "int",
					"value": "1"
				},
				"hightlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/YAWL/YAWL/StartCondition"
			},
			"104": {
				"name": {
					"type": "string",
					"value": "T2"
				},
				"hightlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/YAWL/YAWL/Task"
			},
			"105": {
				"name": {
					"type": "string",
					"value": "T3"
				},
				"hightlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/YAWL/YAWL/Task"
			},
			"107": {
				"name": {
					"type": "string",
					"value": "T1"
				},
				"hightlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/YAWL/YAWL/XorSplitTask"
			},
			"108": {
				"name": {
					"type": "string",
					"value": "T4"
				},
				"hightlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/YAWL/YAWL/AndJoinTask"
			},
			"109": {
				"name": {
					"type": "string",
					"value": "End"
				},
				"tokens": {
					"type": "int",
					"value": "0"
				},
				"hightlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/YAWL/YAWL/EndCondition"
			},
			"110": {
				"$type": "/Formalisms/YAWL/YAWL/ConditionToTask"
			},
			"111": {
				"$type": "/Formalisms/YAWL/YAWL/TaskToTask"
			},
			"112": {
				"$type": "/Formalisms/YAWL/YAWL/TaskToTask"
			},
			"113": {
				"$type": "/Formalisms/YAWL/YAWL/TaskToTask"
			},
			"114": {
				"$type": "/Formalisms/YAWL/YAWL/TaskToTask"
			},
			"117": {
				"$type": "/Formalisms/YAWL/YAWL/TaskToCondition"
			}
		},
		"edges": [
			{
				"src": "103",
				"dest": "110"
			},
			{
				"src": "110",
				"dest": "107"
			},
			{
				"src": "107",
				"dest": "111"
			},
			{
				"src": "111",
				"dest": "104"
			},
			{
				"src": "107",
				"dest": "112"
			},
			{
				"src": "112",
				"dest": "105"
			},
			{
				"src": "104",
				"dest": "113"
			},
			{
				"src": "113",
				"dest": "108"
			},
			{
				"src": "105",
				"dest": "114"
			},
			{
				"src": "114",
				"dest": "108"
			},
			{
				"src": "108",
				"dest": "117"
			},
			{
				"src": "117",
				"dest": "109"
			}
		],
		"metamodels": [
			"/Formalisms/YAWL/YAWL"
		]
	}
}