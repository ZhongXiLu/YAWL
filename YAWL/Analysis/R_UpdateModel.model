{
	"csm": {
		"nodes": {
			"0": {
				"typename": {
					"type": "string",
					"value": "LHSIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						524,
						225
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": ""
				},
				"parser": {
					"type": "code",
					"value": ""
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"4": {
								"segments": {
									"type": "string",
									"value": "m0,0 l350,0 l100,250 l-100,250 l-350,0z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"stroke-width": 2,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": ""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										1,
										0
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/__Transformations__/TransformationRule/TransformationRule/LHS/0.instance"
				},
				"$type": "/Formalisms/__Transformations__/TransformationRule/TransformationRule.defaultIcons/LHSIcon"
			},
			"1": {
				"typename": {
					"type": "string",
					"value": "RHSIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						925,
						225
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": ""
				},
				"parser": {
					"type": "code",
					"value": ""
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"7": {
								"segments": {
									"type": "string",
									"value": "m0,0 l450,0 l0,500 l-450,0 l100,-250z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"stroke-width": 2,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": ""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										0,
										0
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/__Transformations__/TransformationRule/TransformationRule/RHS/1.instance"
				},
				"$type": "/Formalisms/__Transformations__/TransformationRule/TransformationRule.defaultIcons/RHSIcon"
			}
		},
		"edges": [],
		"metamodels": [
			"/Formalisms/__Transformations__/TransformationRule/TransformationRule.defaultIcons",
			"/Formalisms/__Transformations__/Transformation/MoTif.defaultIcons"
		]
	},
	"asm": {
		"nodes": {
			"0": {
				"Condition": {
					"type": "code",
					"value": "result = True"
				},
				"$type": "/Formalisms/__Transformations__/TransformationRule/TransformationRule/LHS"
			},
			"1": {
				"Action": {
					"type": "code",
					"value": "import json\n\nstop = False\n\n# Deadlock\nwith open(\"lola_output/deadlock_path.txt\", \"r\") as file:\n    tasks = set()\n    for line in file.read().splitlines():\n        if line != \"\":\n            tasks.add(line)\n        else:\n            stop = True\n\n    index = 1\n    for task in getAllNodes([\"/Formalisms/YAWL/YAWL/Task\", \"/Formalisms/YAWL/YAWL/XorJoinTask\", \"/Formalisms/YAWL/YAWL/XorSplitTask\", \"/Formalisms/YAWL/YAWL/AndJoinTask\", \"/Formalisms/YAWL/YAWL/AndSplitTask\", \"/Formalisms/YAWL/YAWL/OrJoinTask\", \"/Formalisms/YAWL/YAWL/XorJoinTask\"]):\n        if getAttr(\"name\", task) in tasks:\n            stop = True\n            setAttr(\"hightlight\", True, task)\n            setAttr(\"comment\", \"Deadlock: path #{}\".format(index), task)\n            index += 1\n\n# Dead transitions\nif not stop:\n    with open(\"lola_output/deadtransition_transition.txt\", \"r\") as file:\n        lines = file.read().splitlines()\n        if len(lines) > 0:\n            stop = True\n            for task in getAllNodes([\"/Formalisms/YAWL/YAWL/Task\", \"/Formalisms/YAWL/YAWL/XorJoinTask\", \"/Formalisms/YAWL/YAWL/XorSplitTask\", \"/Formalisms/YAWL/YAWL/AndJoinTask\", \"/Formalisms/YAWL/YAWL/AndSplitTask\", \"/Formalisms/YAWL/YAWL/OrJoinTask\", \"/Formalisms/YAWL/YAWL/XorJoinTask\"]):\n                if getAttr(\"name\", task) == lines[0]:\n                    setAttr(\"hightlight\", True, task)\n                    setAttr(\"comment\", \"Dead transition\", task)\n\n# Option to complete + proper completion\nif not stop:\n    with open(\"lola_output/completion.json\", \"r\") as file:\n        data = json.load(file)\n        if not data[\"analysis\"][\"result\"]:\n            for condition in getAllNodes([\"/Formalisms/YAWL/YAWL/EndCondition\"]):\n                setAttr(\"hightlight\", True, condition)\n                setAttr(\"comment\", \"Cannot reach final marking\", condition)\n\nresult = True"
				},
				"$type": "/Formalisms/__Transformations__/TransformationRule/TransformationRule/RHS"
			}
		},
		"edges": [],
		"metamodels": [
			"/Formalisms/__Transformations__/TransformationRule/TransformationRule",
			"/Formalisms/__Transformations__/Transformation/MoTif"
		]
	}
}